[main]
#sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager
#sessionIdCookie是sessionManager创建会话Cookie的模板：
sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
#sessionIdCookie.name：设置Cookie名字，默认为JSESSIONID；
sessionIdCookie.name=sid
#设置Cookie的域名，默认空，即当前访问的域名；
#sessionIdCookie.domain=sishuok.com
#设置Cookie的路径，默认空，即存储在域名根下；
#sessionIdCookie.path=
#设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie；
sessionIdCookie.maxAge=1800
#如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；
#此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；
sessionIdCookie.httpOnly=true
sessionManager.sessionIdCookie=$sessionIdCookie
#是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，
#即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。
sessionManager.sessionIdCookieEnable=true
securityManager.sessionManager=$sessionManager


#配置设置会话监听器：
sessionListener1=com.stt.shiro.chapter10.web.listener.MySessionListener1
sessionListener2=com.stt.shiro.chapter10.web.listener.MySessionListener2
sessionManager.sessionListeners=$sessionListener1,$sessionListener2

#设置SessionDAO：
#sessionDAO=org.apache.shiro.session.mgt.eis.EnterperiseCacheSessionDAO
#继承了CachingSessionDAO；所有在读取时会先查缓存中是否存在，如果找不到才到数据库中查找。
sessionDAO=com.stt.shiro.chapter10.session.dao.MySessionDAO
#设置Session缓存名字，默认就是shiro-activeSessionCache；
sessionDAO.activeSessionsCacheName=shiro-activeSessionCache
#设置会话ID生成器：用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成。
sessionDAO.sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
sessionManager.sessionDAO=$serssionDAO
#缓存管理器，用于管理缓存的，此处使用Ehcache实现；
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
#设置ehcache缓存的配置文件；
cacheManager.cacheManagerConfigFile=classpath:ehcache.xml
#设置SecurityManager的cacheManager，会自动设置实现了CacheManagerAware接口的相应对象，如SessionDAO的cacheManager；
securityManager.cacheManager=$cacheManager


#配置开启会话验证：
#需要定期的检测会话是否过期，Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情。
#ExecutorServiceSessionValidationScheduler，其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期；
#sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorSessionValidationScheduler

#使用Quartz会话验证调度器
#sessionValidationScheduler=org.apache.shiro.session.mgt.quartz.QuartzSessionValidationSchedule

#使用自定义会话验证调度器
sessionValidationScheduler=com.stt.shiro.chapter10.scheduler.MySessionValidationScheduler

#sessionValidationScheduler.interval：设置调度时间间隔，单位毫秒，默认就是1小时；
sessionValidationScheduler.interval=3600000
#sessionValidationScheduler.sessionManager：设置会话验证调度器进行会话验证时的会话管理器；
sessionValidationScheduler.sessionManager=$sessionManager

#sessionManager.globalSessionTimeout：设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期；
sessionManager.globalSessionTimeout=1800000
#sessionManager.sessionValidationSchedulerEnabled：是否开启会话验证器，默认是开启的；
sessionManager.sessionValidationSchedulerEnable=true
#sessionManager.sessionValidationScheduler：设置会话验证调度器，默认就是使用ExecutorServiceSessionValidationScheduler。
sessionManager.sessionValidationSeheduler=$sessionValidationScheduler
#如果在会话过期时不想删除过期的会话，可以通过如下ini配置进行设置：
#默认是开启的，在会话过期后会调用SessionDAO的delete方法删除会话：如会话时持久化存储的，可以调用此方法进行删除。
#如果是在获取会话时验证了会话已过期，将抛出InvalidSessionException；
#因此需要捕获这个异常并跳转到相应的页面告诉用户会话已过期，让其重新登录，如可以在web.xml配置相应的错误页面
sessionManager.deleteInvalidSessions=true

sessionFactory=org.apache.shiro.session.mgt.OnlineSessionFactory
sessionManager.sessionFactory=$sessionFactory

securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false

[filters]
online=org.apache.shiro.session.filter.OnlineSessionFilter
online.forceLogoutUrl=/login.jsp
online.sessionDAO=$sessionDAO


[users]
zhang=123,admin
wang=123

[roles]
admin=user:*,menu:*

[urls]
/logout=logout
/login.jsp=authc
/**=anon